// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// NextAuth Required Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Your Application Models
enum Status {
  UPCOMING
  PENDING
  LOGGED
  REQUESTED
  PAID
}

enum Role {
  EMPLOYEE
  MANAGER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role?    
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  wagePerHour   Float?    // New field for wage per hour
  contactNumber String?   // New field for contact number
  managerName   String?   // New field for manager's name
  bsb           String?        // Add this field
  accountNumber String?        // Add this field
  
  shifts        Shift[]
  invoices      Invoice[]
  
  accounts      Account[]
  sessions      Session[]
}

model Shift {
  id        Int      @id @default(autoincrement())
  class     String   @db.VarChar(255)
  grade     String   @db.VarChar(255)
  status    Status   @default(UPCOMING)
  date      DateTime
  startTime String   @db.VarChar(5)
  endTime   String   @db.VarChar(5)
  recurring Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  invoiceId Int?
  invoice   Invoice?  @relation(fields: [invoiceId], references: [id])
}

model Invoice {
  id        Int      @id @default(autoincrement())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  shifts    Shift[]
}